plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.3.0'

	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 마리아 디비 추가
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.5.3'

	// Micrometer Tracing 라이브러리 추가
	// 이 라이브러리가 Sleuth의 역할을 대신하며, 추적을 위한 ID를 생성합니다.
	implementation 'io.micrometer:micrometer-observation'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'

	// Zipkin 서버로 추적 데이터를 전송하는 리포터 라이브러리
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

	// Spring Boot Starter for Kafka
	implementation 'org.springframework.kafka:spring-kafka'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
	delete file('src/main/generated')
}
